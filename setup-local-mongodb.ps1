# MongoDB Local Setup Script for Windows
# Run this script as Administrator to set up MongoDB locally

Write-Host "================================================" -ForegroundColor Cyan
Write-Host "  MongoDB Local Setup for Omidar Project" -ForegroundColor Cyan
Write-Host "================================================`n" -ForegroundColor Cyan

# Check if running as Administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è  WARNING: Not running as Administrator" -ForegroundColor Yellow
    Write-Host "   Some operations may fail without admin rights." -ForegroundColor Yellow
    Write-Host "   Right-click PowerShell and 'Run as Administrator' for best results.`n" -ForegroundColor Yellow
}

# Check if MongoDB is already installed
Write-Host "üîç Checking for existing MongoDB installation..." -ForegroundColor Yellow

try {
    $mongoService = Get-Service -Name MongoDB -ErrorAction SilentlyContinue
    if ($mongoService) {
        Write-Host "‚úÖ MongoDB service found!" -ForegroundColor Green
        Write-Host "   Status: $($mongoService.Status)" -ForegroundColor White
        
        if ($mongoService.Status -ne "Running") {
            Write-Host "   Starting MongoDB service..." -ForegroundColor Yellow
            Start-Service -Name MongoDB
            Write-Host "   ‚úÖ MongoDB service started!" -ForegroundColor Green
        }
    }
    else {
        Write-Host "‚ùå MongoDB service not found." -ForegroundColor Red
        Write-Host "`nüì• To install MongoDB, choose one of these methods:" -ForegroundColor Yellow
        Write-Host "   1. Using Chocolatey (run as Admin):" -ForegroundColor White
        Write-Host "      choco install mongodb -y" -ForegroundColor Cyan
        Write-Host "`n   2. Manual download:" -ForegroundColor White
        Write-Host "      https://www.mongodb.com/try/download/community" -ForegroundColor Cyan
        Write-Host "`n   After installation, run this script again.`n" -ForegroundColor Yellow
        exit
    }
}
catch {
    Write-Host "‚ùå Error checking MongoDB: $_" -ForegroundColor Red
    exit
}

# Check if mongosh is available
Write-Host "`nüîç Checking for MongoDB Shell (mongosh)..." -ForegroundColor Yellow
try {
    $mongoshVersion = mongosh --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ MongoDB Shell found!" -ForegroundColor Green
    }
}
catch {
    Write-Host "‚ö†Ô∏è  MongoDB Shell (mongosh) not found" -ForegroundColor Yellow
    Write-Host "   You can download it from: https://www.mongodb.com/try/download/shell" -ForegroundColor White
}

# Test MongoDB connection
Write-Host "`nüîå Testing MongoDB connection..." -ForegroundColor Yellow
try {
    $testConnection = mongosh "mongodb://localhost:27017/test" --eval "db.runCommand({ ping: 1 })" --quiet 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Successfully connected to MongoDB!" -ForegroundColor Green
    }
    else {
        Write-Host "‚ö†Ô∏è  Could not connect to MongoDB" -ForegroundColor Yellow
        Write-Host "   Make sure MongoDB service is running" -ForegroundColor White
    }
}
catch {
    Write-Host "‚ö†Ô∏è  Could not test connection: $_" -ForegroundColor Yellow
}

# Create .env.local file
Write-Host "`nüìù Creating .env.local file..." -ForegroundColor Yellow

$envContent = @"
# MongoDB Local Connection
# Generated by setup-local-mongodb.ps1

MONGO_URI=mongodb://localhost:27017/omidar

# Alternative configurations (comment/uncomment as needed):
# 
# For MongoDB Atlas (cloud):
# MONGO_URI=mongodb+srv://<username>:<password>@<cluster>.mongodb.net/omidar
#
# For local MongoDB with authentication:
# MONGO_URI=mongodb://username:password@localhost:27017/omidar

"@

$envPath = Join-Path $PSScriptRoot ".env.local"

if (Test-Path $envPath) {
    Write-Host "‚ö†Ô∏è  .env.local already exists!" -ForegroundColor Yellow
    $backup = "${envPath}.backup.$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    Copy-Item $envPath $backup
    Write-Host "   Created backup: $backup" -ForegroundColor White
}

$envContent | Out-File -FilePath $envPath -Encoding UTF8 -NoNewline
Write-Host "‚úÖ Created .env.local with local MongoDB configuration" -ForegroundColor Green

# Summary
Write-Host "`n================================================" -ForegroundColor Cyan
Write-Host "  ‚úÖ Setup Complete!" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Cyan

Write-Host "`nüìã Next Steps:" -ForegroundColor Yellow
Write-Host "   1. Your .env.local is now configured for local MongoDB" -ForegroundColor White
Write-Host "   2. Database name: 'omidar'" -ForegroundColor White
Write-Host "   3. Start your dev server: npm run dev" -ForegroundColor White
Write-Host "   4. Your app will connect to: mongodb://localhost:27017/omidar" -ForegroundColor White

Write-Host "`nüõ†Ô∏è  Useful Commands:" -ForegroundColor Yellow
Write-Host "   View database in MongoDB Compass:" -ForegroundColor White
Write-Host "     Connection string: mongodb://localhost:27017" -ForegroundColor Cyan
Write-Host "`n   Connect via shell:" -ForegroundColor White
Write-Host "     mongosh" -ForegroundColor Cyan
Write-Host "`n   Check MongoDB status:" -ForegroundColor White
Write-Host "     Get-Service -Name MongoDB" -ForegroundColor Cyan
Write-Host "`n   Stop MongoDB:" -ForegroundColor White
Write-Host "     Stop-Service -Name MongoDB" -ForegroundColor Cyan
Write-Host "`n   Start MongoDB:" -ForegroundColor White
Write-Host "     Start-Service -Name MongoDB" -ForegroundColor Cyan

Write-Host "`nüìñ For detailed guide, see: MONGODB_SETUP_GUIDE.md" -ForegroundColor Cyan
Write-Host ""

